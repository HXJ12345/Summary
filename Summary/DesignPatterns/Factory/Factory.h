#ifndef FACTORY_H
#define FACTORY_H

/**
* @filename         Factory.h
* @brief            工厂模式
* @author           HXJ
* @date             2022-05-29
**/

namespace HXJ{

//动机
    //在软件系统中，经常面临创建对象的工作，由于需求的变化，需要创建的对象的具体类型经常改变。

    //如果应对这种改变？如何绕过常规的创建方法new,提供一种封装机制来避免客户端程序对这种具体对象创建工作的紧耦合？

//定义
    //定义一个用于创建对象的接口，让子类决定实例化那个类。工厂模式使得一个类的实例化延迟（目的:解耦）到子类

//总结
    //工厂模式用于隔离类对象的使用者和具体类型之间的耦合，面对一个经常变化的具体类型，紧耦合会导致软件的脆弱
    //工厂模式通过面向对象的方法，将所要创建的具体对象工作延迟到子类，从而实现一种扩展（而非更改）的策略
    //工厂模式解决单个对象的需求变化。缺点在于要求创建方法/参数不同

}

















#endif // FACTORY_H
