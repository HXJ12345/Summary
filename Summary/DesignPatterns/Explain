面向对象设计原则：
    一、依赖倒置原则（DIP）
        .高层模块（稳定）不应该依赖低层模块（变化），二者都应该依赖于抽象（稳定）。
        .抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）。
    二、开放封闭原则（OCP）
        .对扩展开放，对更改封闭。
        .类模块应该是可扩展的，但是不可修改。
    三、单一职责原则（SRP）
        .一个类应该仅有一个引起它变化的原因。
        .变化的方向隐含着类的责任。
    四、Liskov替换原则（LSP）
        .子类必须能够替换它们的基类（IS-A）。
        .继承表达类型抽象。
    五、接口隔离原则（ISP）
        .不应该强迫客户程序依赖它们不用的方法。
        .接口应该小而完备。
    六、优先使用对象组合，而不是类继承
        .类继承通常为“白箱复用”，对象组合通常为“黑箱复用”。
        .继承在某种程度上破坏了封装性，子类父类耦合度高。
        .而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。
    七、封装变化点
        .使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对另一侧产生不良的影响，实现层次间的松耦合。
    八、针对接口编程，而不是针对实现编程
        .不将变量类型声明为某个特定的具体类，而是声明为某个接口。
        .客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。
        .减少系统各个部分的依赖关系，从而实现高内聚、低耦合的类型设计方案。

产业强盛的标志：接口标准化

GOF-23 模式分类
    从目的来看：
        .创建型模式：
        .结构型模式：
        .行为型模式：
    从范围来看：
        .类模式
        .对象模式
    从封装变化角度来看：
        .组件协作：
            Template Method
            Strategy
            Observer / Event
        .单一职责：
            Decorator
            Bridge
        .对象创建：
            Factory Method
            Abstract Factory
            Prototype
            Builder
         .对象性能
            Singleton
            Flyweight
         .接口隔离：
            Facade
            Proxy
            Mediator
            Adapter
         .状态变化：
            Memento
            State
         .数据结构
            Composite
            Iterator
            Chain or Resposibility
         .行为变化
            Command
            Visitor
         .领域问题：
            Interpreter















